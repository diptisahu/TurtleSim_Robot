
TurtleSim Bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00000988  00000a1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000988  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000d  0080022e  0080022e  00000a4a  2**0
                  ALLOC
  3 .stab         00001bfc  00000000  00000000  00000a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000583  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00002bd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c60  00000000  00000000  00002c70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000020a  00000000  00000000  000038d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b4  00000000  00000000  00003ada  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00004090  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d6  00000000  00000000  000042cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000497  00000000  00000000  000045a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
   c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 56 02 	jmp	0x4ac	; 0x4ac <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 e8       	ldi	r30, 0x88	; 136
  fc:	f9 e0       	ldi	r31, 0x09	; 9
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 32       	cpi	r26, 0x2E	; 46
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	ae e2       	ldi	r26, 0x2E	; 46
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ab 33       	cpi	r26, 0x3B	; 59
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 10 03 	call	0x620	; 0x620 <main>
 122:	0c 94 c2 04 	jmp	0x984	; 0x984 <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <lcd_port_config>:
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
	DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
 12a:	87 b1       	in	r24, 0x07	; 7
 12c:	87 6f       	ori	r24, 0xF7	; 247
 12e:	87 b9       	out	0x07, r24	; 7
	PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
 130:	88 b1       	in	r24, 0x08	; 8
 132:	80 78       	andi	r24, 0x80	; 128
 134:	88 b9       	out	0x08, r24	; 8
}
 136:	08 95       	ret

00000138 <lcd_set_4bit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	86 e6       	ldi	r24, 0x66	; 102
 13a:	9e e0       	ldi	r25, 0x0E	; 14
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <lcd_set_4bit+0x4>
 140:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 142:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 144:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 146:	80 e3       	ldi	r24, 0x30	; 48
 148:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 14a:	42 9a       	sbi	0x08, 2	; 8
 14c:	ef ef       	ldi	r30, 0xFF	; 255
 14e:	f7 e4       	ldi	r31, 0x47	; 71
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x18>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_set_4bit+0x1e>
 156:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 158:	42 98       	cbi	0x08, 2	; 8
 15a:	e6 e6       	ldi	r30, 0x66	; 102
 15c:	fe e0       	ldi	r31, 0x0E	; 14
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x26>
 162:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 164:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 166:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 168:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 16a:	42 9a       	sbi	0x08, 2	; 8
 16c:	ef ef       	ldi	r30, 0xFF	; 255
 16e:	f7 e4       	ldi	r31, 0x47	; 71
 170:	31 97       	sbiw	r30, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x38>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_set_4bit+0x3e>
 176:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 178:	42 98       	cbi	0x08, 2	; 8
 17a:	e6 e6       	ldi	r30, 0x66	; 102
 17c:	fe e0       	ldi	r31, 0x0E	; 14
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_set_4bit+0x46>
 182:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 184:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 186:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3
 188:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 18a:	42 9a       	sbi	0x08, 2	; 8
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	97 e4       	ldi	r25, 0x47	; 71
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <lcd_set_4bit+0x58>
 194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_set_4bit+0x5e>
 196:	00 00       	nop
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 198:	42 98       	cbi	0x08, 2	; 8
 19a:	e6 e6       	ldi	r30, 0x66	; 102
 19c:	fe e0       	ldi	r31, 0x0E	; 14
 19e:	31 97       	sbiw	r30, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_set_4bit+0x66>
 1a2:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 1a4:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 1a6:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
 1a8:	80 e2       	ldi	r24, 0x20	; 32
 1aa:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 1ac:	42 9a       	sbi	0x08, 2	; 8
 1ae:	86 e6       	ldi	r24, 0x66	; 102
 1b0:	9e e0       	ldi	r25, 0x0E	; 14
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <lcd_set_4bit+0x7a>
 1b6:	00 00       	nop
	_delay_ms(1);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1b8:	42 98       	cbi	0x08, 2	; 8

	
}
 1ba:	08 95       	ret

000001bc <lcd_wr_command>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1bc:	98 b1       	in	r25, 0x08	; 8
 1be:	9f 70       	andi	r25, 0x0F	; 15
 1c0:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1c2:	98 b1       	in	r25, 0x08	; 8
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1c4:	28 2f       	mov	r18, r24
 1c6:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1c8:	92 2b       	or	r25, r18
 1ca:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1cc:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1ce:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1d0:	42 9a       	sbi	0x08, 2	; 8
 1d2:	ef ef       	ldi	r30, 0xFF	; 255
 1d4:	f7 e4       	ldi	r31, 0x47	; 71
 1d6:	31 97       	sbiw	r30, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <lcd_wr_command+0x1a>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <lcd_wr_command+0x20>
 1dc:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1de:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1e0:	98 b1       	in	r25, 0x08	; 8
 1e2:	9f 70       	andi	r25, 0x0F	; 15
 1e4:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1e6:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1e8:	82 95       	swap	r24
 1ea:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1ec:	89 2b       	or	r24, r25
 1ee:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1f0:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1f2:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1f4:	42 9a       	sbi	0x08, 2	; 8
 1f6:	8f ef       	ldi	r24, 0xFF	; 255
 1f8:	97 e4       	ldi	r25, 0x47	; 71
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_wr_command+0x3e>
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_wr_command+0x44>
 200:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 202:	42 98       	cbi	0x08, 2	; 8
}
 204:	08 95       	ret

00000206 <lcd_init>:
 206:	86 e6       	ldi	r24, 0x66	; 102
 208:	9e e0       	ldi	r25, 0x0E	; 14
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_init+0x4>
 20e:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
 210:	88 e2       	ldi	r24, 0x28	; 40
 212:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
	lcd_wr_command(0x01);
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
	lcd_wr_command(0x06);
 21c:	86 e0       	ldi	r24, 0x06	; 6
 21e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
	lcd_wr_command(0x0E);
 222:	8e e0       	ldi	r24, 0x0E	; 14
 224:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
	lcd_wr_command(0x80);
 228:	80 e8       	ldi	r24, 0x80	; 128
 22a:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
	
}
 22e:	08 95       	ret

00000230 <lcd_wr_char>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 230:	98 b1       	in	r25, 0x08	; 8
 232:	9f 70       	andi	r25, 0x0F	; 15
 234:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 236:	98 b1       	in	r25, 0x08	; 8
//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 238:	28 2f       	mov	r18, r24
 23a:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 23c:	92 2b       	or	r25, r18
 23e:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 240:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 242:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 244:	42 9a       	sbi	0x08, 2	; 8
 246:	ef ef       	ldi	r30, 0xFF	; 255
 248:	f7 e4       	ldi	r31, 0x47	; 71
 24a:	31 97       	sbiw	r30, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_wr_char+0x1a>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_wr_char+0x20>
 250:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 252:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 254:	98 b1       	in	r25, 0x08	; 8
 256:	9f 70       	andi	r25, 0x0F	; 15
 258:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 25a:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 25c:	82 95       	swap	r24
 25e:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 260:	89 2b       	or	r24, r25
 262:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 264:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 266:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 268:	42 9a       	sbi	0x08, 2	; 8
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	97 e4       	ldi	r25, 0x47	; 71
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <lcd_wr_char+0x3e>
 272:	00 c0       	rjmp	.+0      	; 0x274 <lcd_wr_char+0x44>
 274:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 276:	42 98       	cbi	0x08, 2	; 8
}
 278:	08 95       	ret

0000027a <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
	lcd_wr_command(0x80);
 27a:	80 e8       	ldi	r24, 0x80	; 128
 27c:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
}
 280:	08 95       	ret

00000282 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
 282:	cf 93       	push	r28
 284:	df 93       	push	r29
 286:	ec 01       	movw	r28, r24
	while(*str != '\0')
 288:	88 81       	ld	r24, Y
 28a:	88 23       	and	r24, r24
 28c:	31 f0       	breq	.+12     	; 0x29a <lcd_string+0x18>
	lcd_wr_command(0x80);
}


//Function to Print String on LCD
void lcd_string(char *str)
 28e:	21 96       	adiw	r28, 0x01	; 1
{
	while(*str != '\0')
	{
		lcd_wr_char(*str);
 290:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 294:	89 91       	ld	r24, Y+
 296:	88 23       	and	r24, r24
 298:	d9 f7       	brne	.-10     	; 0x290 <lcd_string+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 2a0:	82 30       	cpi	r24, 0x02	; 2
 2a2:	79 f0       	breq	.+30     	; 0x2c2 <lcd_cursor+0x22>
 2a4:	83 30       	cpi	r24, 0x03	; 3
 2a6:	18 f4       	brcc	.+6      	; 0x2ae <lcd_cursor+0xe>
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	c9 f4       	brne	.+50     	; 0x2de <lcd_cursor+0x3e>
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <lcd_cursor+0x18>
 2ae:	83 30       	cpi	r24, 0x03	; 3
 2b0:	69 f0       	breq	.+26     	; 0x2cc <lcd_cursor+0x2c>
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	a1 f4       	brne	.+40     	; 0x2de <lcd_cursor+0x3e>
 2b6:	0f c0       	rjmp	.+30     	; 0x2d6 <lcd_cursor+0x36>
		case 1: lcd_wr_command (0x80 + column - 1); break;
 2b8:	86 2f       	mov	r24, r22
 2ba:	81 58       	subi	r24, 0x81	; 129
 2bc:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
 2c0:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 2c2:	86 2f       	mov	r24, r22
 2c4:	81 54       	subi	r24, 0x41	; 65
 2c6:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
 2ca:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2cc:	86 2f       	mov	r24, r22
 2ce:	8d 56       	subi	r24, 0x6D	; 109
 2d0:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
 2d4:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2d6:	86 2f       	mov	r24, r22
 2d8:	8d 52       	subi	r24, 0x2D	; 45
 2da:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_wr_command>
 2de:	08 95       	ret

000002e0 <lcd_print>:
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2e0:	0f 93       	push	r16
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	8a 01       	movw	r16, r20
 2ea:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2ec:	88 23       	and	r24, r24
 2ee:	11 f0       	breq	.+4      	; 0x2f4 <lcd_print+0x14>
 2f0:	66 23       	and	r22, r22
 2f2:	19 f4       	brne	.+6      	; 0x2fa <lcd_print+0x1a>
	{
		lcd_home();
 2f4:	0e 94 3d 01 	call	0x27a	; 0x27a <lcd_home>
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <lcd_print+0x1e>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2fa:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cursor>
	}
	if(digits==5 || flag==1)
 2fe:	c5 30       	cpi	r28, 0x05	; 5
 300:	d1 05       	cpc	r29, r1
 302:	71 f4       	brne	.+28     	; 0x320 <lcd_print+0x40>
	{
		million=value/10000+48;
 304:	c8 01       	movw	r24, r16
 306:	60 e1       	ldi	r22, 0x10	; 16
 308:	77 e2       	ldi	r23, 0x27	; 39
 30a:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodhi4>
 30e:	cb 01       	movw	r24, r22
 310:	c0 96       	adiw	r24, 0x30	; 48
 312:	90 93 2f 02 	sts	0x022F, r25
 316:	80 93 2e 02 	sts	0x022E, r24
		lcd_wr_char(million);
 31a:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
 31e:	03 c0       	rjmp	.+6      	; 0x326 <lcd_print+0x46>
		flag=1;
	}
	if(digits==4 || flag==1)
 320:	c4 30       	cpi	r28, 0x04	; 4
 322:	d1 05       	cpc	r29, r1
 324:	b9 f4       	brne	.+46     	; 0x354 <lcd_print+0x74>
	{
		temp = value/1000;
 326:	c8 01       	movw	r24, r16
 328:	68 ee       	ldi	r22, 0xE8	; 232
 32a:	73 e0       	ldi	r23, 0x03	; 3
 32c:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodhi4>
 330:	cb 01       	movw	r24, r22
 332:	70 93 31 02 	sts	0x0231, r23
 336:	60 93 30 02 	sts	0x0230, r22
		thousand = temp%10 + 48;
 33a:	6a e0       	ldi	r22, 0x0A	; 10
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodhi4>
 342:	c0 96       	adiw	r24, 0x30	; 48
 344:	90 93 3a 02 	sts	0x023A, r25
 348:	80 93 39 02 	sts	0x0239, r24
		lcd_wr_char(thousand);
 34c:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
		flag=1;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	01 c0       	rjmp	.+2      	; 0x356 <lcd_print+0x76>
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
	unsigned char flag=0;
 354:	80 e0       	ldi	r24, 0x00	; 0
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 356:	c3 30       	cpi	r28, 0x03	; 3
 358:	d1 05       	cpc	r29, r1
 35a:	11 f0       	breq	.+4      	; 0x360 <lcd_print+0x80>
 35c:	81 30       	cpi	r24, 0x01	; 1
 35e:	b1 f4       	brne	.+44     	; 0x38c <lcd_print+0xac>
	{
		temp = value/100;
 360:	c8 01       	movw	r24, r16
 362:	64 e6       	ldi	r22, 0x64	; 100
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodhi4>
 36a:	cb 01       	movw	r24, r22
 36c:	70 93 31 02 	sts	0x0231, r23
 370:	60 93 30 02 	sts	0x0230, r22
		hundred = temp%10 + 48;
 374:	6a e0       	ldi	r22, 0x0A	; 10
 376:	70 e0       	ldi	r23, 0x00	; 0
 378:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodhi4>
 37c:	c0 96       	adiw	r24, 0x30	; 48
 37e:	90 93 36 02 	sts	0x0236, r25
 382:	80 93 35 02 	sts	0x0235, r24
		lcd_wr_char(hundred);
 386:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
		flag=1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==2 || flag==1)
 38c:	c2 30       	cpi	r28, 0x02	; 2
 38e:	d1 05       	cpc	r29, r1
 390:	11 f0       	breq	.+4      	; 0x396 <lcd_print+0xb6>
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	b1 f4       	brne	.+44     	; 0x3c2 <lcd_print+0xe2>
	{
		temp = value/10;
 396:	2a e0       	ldi	r18, 0x0A	; 10
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	c8 01       	movw	r24, r16
 39c:	b9 01       	movw	r22, r18
 39e:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodhi4>
 3a2:	cb 01       	movw	r24, r22
 3a4:	70 93 31 02 	sts	0x0231, r23
 3a8:	60 93 30 02 	sts	0x0230, r22
		tens = temp%10 + 48;
 3ac:	b9 01       	movw	r22, r18
 3ae:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodhi4>
 3b2:	c0 96       	adiw	r24, 0x30	; 48
 3b4:	90 93 33 02 	sts	0x0233, r25
 3b8:	80 93 32 02 	sts	0x0232, r24
		lcd_wr_char(tens);
 3bc:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
		flag=1;
 3c0:	81 e0       	ldi	r24, 0x01	; 1
	}
	if(digits==1 || flag==1)
 3c2:	c1 30       	cpi	r28, 0x01	; 1
 3c4:	d1 05       	cpc	r29, r1
 3c6:	11 f0       	breq	.+4      	; 0x3cc <lcd_print+0xec>
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	61 f4       	brne	.+24     	; 0x3e4 <lcd_print+0x104>
	{
		unit = value%10 + 48;
 3cc:	c8 01       	movw	r24, r16
 3ce:	6a e0       	ldi	r22, 0x0A	; 10
 3d0:	70 e0       	ldi	r23, 0x00	; 0
 3d2:	0e 94 ae 04 	call	0x95c	; 0x95c <__udivmodhi4>
 3d6:	c0 96       	adiw	r24, 0x30	; 48
 3d8:	90 93 38 02 	sts	0x0238, r25
 3dc:	80 93 37 02 	sts	0x0237, r24
		lcd_wr_char(unit);
 3e0:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
	}
	if(digits>5)
 3e4:	c6 30       	cpi	r28, 0x06	; 6
 3e6:	d1 05       	cpc	r29, r1
 3e8:	1c f0       	brlt	.+6      	; 0x3f0 <lcd_print+0x110>
	{
		lcd_wr_char('E');
 3ea:	85 e4       	ldi	r24, 0x45	; 69
 3ec:	0e 94 18 01 	call	0x230	; 0x230 <lcd_wr_char>
	}
	
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <buzzer_pin_config>:
#include <util/delay.h>

//Function to initialize Buzzer
void buzzer_pin_config (void)
{
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as output
 3fa:	3b 9a       	sbi	0x07, 3	; 7
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 3fc:	43 98       	cbi	0x08, 3	; 8
}
 3fe:	08 95       	ret

00000400 <buzzer_on>:

void buzzer_on (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 400:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore | 0x08;
 402:	88 60       	ori	r24, 0x08	; 8
	PORTC = port_restore;
 404:	88 b9       	out	0x08, r24	; 8
}
 406:	08 95       	ret

00000408 <buzzer_off>:

void buzzer_off (void)
{
	unsigned char port_restore = 0;
	port_restore = PINC;
 408:	86 b1       	in	r24, 0x06	; 6
	port_restore = port_restore & 0xF7;
 40a:	87 7f       	andi	r24, 0xF7	; 247
	PORTC = port_restore;
 40c:	88 b9       	out	0x08, r24	; 8
 40e:	08 95       	ret

00000410 <servo1_pin_config>:
#include <util/delay.h>

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
 410:	25 9a       	sbi	0x04, 5	; 4
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
 412:	2d 9a       	sbi	0x05, 5	; 5
}
 414:	08 95       	ret

00000416 <timer1_init>:

void timer1_init(void)
{
 TCCR1B = 0x00; //stop
 416:	e1 e8       	ldi	r30, 0x81	; 129
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
 41c:	8c ef       	ldi	r24, 0xFC	; 252
 41e:	80 93 85 00 	sts	0x0085, r24
 TCNT1L = 0x01;	//Counter low value to which OCR1xH value is to be compared with
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	80 93 84 00 	sts	0x0084, r24
 OCR1AH = 0x03;	//Output compare Register high value for servo 1
 428:	93 e0       	ldi	r25, 0x03	; 3
 42a:	90 93 89 00 	sts	0x0089, r25
 OCR1AL = 0xFF;	//Output Compare Register low Value For servo 1
 42e:	8f ef       	ldi	r24, 0xFF	; 255
 430:	80 93 88 00 	sts	0x0088, r24
 ICR1H  = 0x03;	
 434:	90 93 87 00 	sts	0x0087, r25
 ICR1L  = 0xFF;
 438:	80 93 86 00 	sts	0x0086, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
 43c:	8b ea       	ldi	r24, 0xAB	; 171
 43e:	80 93 80 00 	sts	0x0080, r24
 					For Overriding normal port functionality to OCRnA outputs.
				  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
 442:	10 92 82 00 	sts	0x0082, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
 446:	8c e0       	ldi	r24, 0x0C	; 12
 448:	80 83       	st	Z, r24
}
 44a:	08 95       	ret

0000044c <servo_1>:
//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 OCR1AH = 0x00;
 44c:	10 92 89 00 	sts	0x0089, r1

//Function to rotate Servo 1 by a specified angle in the multiples of 1.86 degrees
void servo_1(unsigned char degrees)  
{
 float PositionPanServo = 0;
  PositionPanServo = ((float)degrees / 1.86) + 35.0;
 450:	68 2f       	mov	r22, r24
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 20 04 	call	0x840	; 0x840 <__floatunsisf>
 45c:	2b e7       	ldi	r18, 0x7B	; 123
 45e:	34 e1       	ldi	r19, 0x14	; 20
 460:	4e ee       	ldi	r20, 0xEE	; 238
 462:	5f e3       	ldi	r21, 0x3F	; 63
 464:	0e 94 8c 03 	call	0x718	; 0x718 <__divsf3>
 468:	20 e0       	ldi	r18, 0x00	; 0
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	4c e0       	ldi	r20, 0x0C	; 12
 46e:	52 e4       	ldi	r21, 0x42	; 66
 470:	0e 94 28 03 	call	0x650	; 0x650 <__addsf3>
 OCR1AH = 0x00;
 OCR1AL = (unsigned char) PositionPanServo;
 474:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__fixunssfsi>
 478:	60 93 88 00 	sts	0x0088, r22
}
 47c:	08 95       	ret

0000047e <servo_1_free>:
//and make them free by giving 100% duty cycle at the PWM. This function can be used to 
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
 OCR1AH = 0x03; 
 47e:	83 e0       	ldi	r24, 0x03	; 3
 480:	80 93 89 00 	sts	0x0089, r24
 OCR1AL = 0xFF; //Servo 1 off
 484:	8f ef       	ldi	r24, 0xFF	; 255
 486:	80 93 88 00 	sts	0x0088, r24
 48a:	08 95       	ret

0000048c <uart0_init>:
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
	 UCSR0B = 0x00; //disable while setting baud rate
 48c:	e1 ec       	ldi	r30, 0xC1	; 193
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	10 82       	st	Z, r1
	 UCSR0A = 0x00;
 492:	10 92 c0 00 	sts	0x00C0, r1
	 UCSR0C = 0x06;
 496:	86 e0       	ldi	r24, 0x06	; 6
 498:	80 93 c2 00 	sts	0x00C2, r24
	 UBRR0L = 0x5F; //set baud rate lo
 49c:	8f e5       	ldi	r24, 0x5F	; 95
 49e:	80 93 c4 00 	sts	0x00C4, r24
	 UBRR0H = 0x00; //set baud rate hi
 4a2:	10 92 c5 00 	sts	0x00C5, r1
	 UCSR0B = 0x98;
 4a6:	88 e9       	ldi	r24, 0x98	; 152
 4a8:	80 83       	st	Z, r24
}
 4aa:	08 95       	ret

000004ac <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
 4ac:	1f 92       	push	r1
 4ae:	0f 92       	push	r0
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	0f 92       	push	r0
 4b4:	0b b6       	in	r0, 0x3b	; 59
 4b6:	0f 92       	push	r0
 4b8:	11 24       	eor	r1, r1
 4ba:	2f 93       	push	r18
 4bc:	3f 93       	push	r19
 4be:	4f 93       	push	r20
 4c0:	5f 93       	push	r21
 4c2:	6f 93       	push	r22
 4c4:	7f 93       	push	r23
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	af 93       	push	r26
 4cc:	bf 93       	push	r27
 4ce:	ef 93       	push	r30
 4d0:	ff 93       	push	r31
	data = UDR0; 				//making copy of data from UDR0 in 'data' variable
 4d2:	80 91 c6 00 	lds	r24, 0x00C6
 4d6:	80 93 34 02 	sts	0x0234, r24

	if(data == 0x38) //ASCII value of 8
 4da:	88 33       	cpi	r24, 0x38	; 56
 4dc:	11 f4       	brne	.+4      	; 0x4e2 <__vector_25+0x36>
	{
		PORTA=0x06;  //forward
 4de:	86 e0       	ldi	r24, 0x06	; 6
 4e0:	82 b9       	out	0x02, r24	; 2
	}

	if(data == 0x32) //ASCII value of 2
 4e2:	80 91 34 02 	lds	r24, 0x0234
 4e6:	82 33       	cpi	r24, 0x32	; 50
 4e8:	11 f4       	brne	.+4      	; 0x4ee <__vector_25+0x42>
	{
		PORTA=0x09; //back
 4ea:	89 e0       	ldi	r24, 0x09	; 9
 4ec:	82 b9       	out	0x02, r24	; 2
	}

	if(data == 0x34) //ASCII value of 4
 4ee:	80 91 34 02 	lds	r24, 0x0234
 4f2:	84 33       	cpi	r24, 0x34	; 52
 4f4:	11 f4       	brne	.+4      	; 0x4fa <__vector_25+0x4e>
	{
		PORTA=0x05;  //left
 4f6:	85 e0       	ldi	r24, 0x05	; 5
 4f8:	82 b9       	out	0x02, r24	; 2
	}

	if(data == 0x36) //ASCII value of 6
 4fa:	80 91 34 02 	lds	r24, 0x0234
 4fe:	86 33       	cpi	r24, 0x36	; 54
 500:	11 f4       	brne	.+4      	; 0x506 <__vector_25+0x5a>
	{
		PORTA=0x0A; //right
 502:	8a e0       	ldi	r24, 0x0A	; 10
 504:	82 b9       	out	0x02, r24	; 2
	}

	if(data == 0x35) //ASCII value of 5
 506:	80 91 34 02 	lds	r24, 0x0234
 50a:	85 33       	cpi	r24, 0x35	; 53
 50c:	09 f4       	brne	.+2      	; 0x510 <__vector_25+0x64>
	{
		PORTA=0x00; //stop
 50e:	12 b8       	out	0x02, r1	; 2
	}

	if(data == 0x37) //ASCII value of 7
 510:	80 91 34 02 	lds	r24, 0x0234
 514:	87 33       	cpi	r24, 0x37	; 55
 516:	11 f4       	brne	.+4      	; 0x51c <__vector_25+0x70>
	{
		buzzer_on(); //turns buzzer ON
 518:	0e 94 00 02 	call	0x400	; 0x400 <buzzer_on>
	}

	if(data == 0x39) //ASCII value of 9
 51c:	80 91 34 02 	lds	r24, 0x0234
 520:	89 33       	cpi	r24, 0x39	; 57
 522:	11 f4       	brne	.+4      	; 0x528 <__vector_25+0x7c>
	{
		buzzer_off(); //turns buzzer OFF
 524:	0e 94 04 02 	call	0x408	; 0x408 <buzzer_off>
	}
	
	if(data == 0x30) //ASCII value of 0
 528:	80 91 34 02 	lds	r24, 0x0234
 52c:	80 33       	cpi	r24, 0x30	; 48
 52e:	61 f4       	brne	.+24     	; 0x548 <__vector_25+0x9c>
	{
		servo_1(60); //rotates to 60 degrees
 530:	8c e3       	ldi	r24, 0x3C	; 60
 532:	0e 94 26 02 	call	0x44c	; 0x44c <servo_1>
 536:	8f ef       	ldi	r24, 0xFF	; 255
 538:	9f ef       	ldi	r25, 0xFF	; 255
 53a:	ac e2       	ldi	r26, 0x2C	; 44
 53c:	81 50       	subi	r24, 0x01	; 1
 53e:	90 40       	sbci	r25, 0x00	; 0
 540:	a0 40       	sbci	r26, 0x00	; 0
 542:	e1 f7       	brne	.-8      	; 0x53c <__vector_25+0x90>
 544:	00 c0       	rjmp	.+0      	; 0x546 <__vector_25+0x9a>
 546:	00 00       	nop
		_delay_ms(1000); //wait for 1 second
	}
	if(data == 0x31) //ASCII value of 1
 548:	80 91 34 02 	lds	r24, 0x0234
 54c:	81 33       	cpi	r24, 0x31	; 49
 54e:	61 f4       	brne	.+24     	; 0x568 <__vector_25+0xbc>
	{
		servo_1(90); // rotates to 90 degrees
 550:	8a e5       	ldi	r24, 0x5A	; 90
 552:	0e 94 26 02 	call	0x44c	; 0x44c <servo_1>
 556:	8f ef       	ldi	r24, 0xFF	; 255
 558:	9f ef       	ldi	r25, 0xFF	; 255
 55a:	ac e2       	ldi	r26, 0x2C	; 44
 55c:	81 50       	subi	r24, 0x01	; 1
 55e:	90 40       	sbci	r25, 0x00	; 0
 560:	a0 40       	sbci	r26, 0x00	; 0
 562:	e1 f7       	brne	.-8      	; 0x55c <__vector_25+0xb0>
 564:	00 c0       	rjmp	.+0      	; 0x566 <__vector_25+0xba>
 566:	00 00       	nop
		_delay_ms(1000); //wait for 1 second
	}
	if(data == 0x33) //ASCII value of 3
 568:	80 91 34 02 	lds	r24, 0x0234
 56c:	83 33       	cpi	r24, 0x33	; 51
 56e:	41 f4       	brne	.+16     	; 0x580 <__vector_25+0xd4>
	{
		lcd_cursor(1,1);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	61 e0       	ldi	r22, 0x01	; 1
 574:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cursor>
		lcd_string("    ERROR....   ");	//"ERROR..." flashes on the LCD screen
 578:	80 e0       	ldi	r24, 0x00	; 0
 57a:	92 e0       	ldi	r25, 0x02	; 2
 57c:	0e 94 41 01 	call	0x282	; 0x282 <lcd_string>
	}

 580:	ff 91       	pop	r31
 582:	ef 91       	pop	r30
 584:	bf 91       	pop	r27
 586:	af 91       	pop	r26
 588:	9f 91       	pop	r25
 58a:	8f 91       	pop	r24
 58c:	7f 91       	pop	r23
 58e:	6f 91       	pop	r22
 590:	5f 91       	pop	r21
 592:	4f 91       	pop	r20
 594:	3f 91       	pop	r19
 596:	2f 91       	pop	r18
 598:	0f 90       	pop	r0
 59a:	0b be       	out	0x3b, r0	; 59
 59c:	0f 90       	pop	r0
 59e:	0f be       	out	0x3f, r0	; 63
 5a0:	0f 90       	pop	r0
 5a2:	1f 90       	pop	r1
 5a4:	18 95       	reti

000005a6 <motion_pin_config>:
#include <avr/interrupt.h>
#include <util/delay.h>

void motion_pin_config (void)
{
	DDRA = DDRA | 0x0F; //set direction of the PORTA 3 to PORTA 0 pins as output
 5a6:	81 b1       	in	r24, 0x01	; 1
 5a8:	8f 60       	ori	r24, 0x0F	; 15
 5aa:	81 b9       	out	0x01, r24	; 1
	PORTA = PORTA & 0xF0; // set initial value of the PORTA 3 to PORTA 0 pins to logic 0
 5ac:	82 b1       	in	r24, 0x02	; 2
 5ae:	80 7f       	andi	r24, 0xF0	; 240
 5b0:	82 b9       	out	0x02, r24	; 2
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 5b2:	ea e0       	ldi	r30, 0x0A	; 10
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	80 81       	ld	r24, Z
 5b8:	88 61       	ori	r24, 0x18	; 24
 5ba:	80 83       	st	Z, r24
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM
 5bc:	eb e0       	ldi	r30, 0x0B	; 11
 5be:	f1 e0       	ldi	r31, 0x01	; 1
 5c0:	80 81       	ld	r24, Z
 5c2:	88 61       	ori	r24, 0x18	; 24
 5c4:	80 83       	st	Z, r24
}
 5c6:	08 95       	ret

000005c8 <motion_set>:
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
	PortARestore = PORTA; 			// reading the PORTA's original status
 5c8:	92 b1       	in	r25, 0x02	; 2
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
 5ca:	90 7f       	andi	r25, 0xF0	; 240
//Function used for setting motor's direction
void motion_set (unsigned char Direction)
{
	unsigned char PortARestore = 0;

	Direction &= 0x0F; 			// removing upper nibbel as it is not needed
 5cc:	8f 70       	andi	r24, 0x0F	; 15
	PortARestore = PORTA; 			// reading the PORTA's original status
	PortARestore &= 0xF0; 			// setting lower direction nibbel to 0
	PortARestore |= Direction; 	// adding lower nibbel for direction command and restoring the PORTA status
 5ce:	98 2b       	or	r25, r24
	PORTA = PortARestore; 			// setting the command to the port
 5d0:	92 b9       	out	0x02, r25	; 2
}
 5d2:	08 95       	ret

000005d4 <forward>:


void forward (void) //both wheels forward
{
	motion_set(0x06);
 5d4:	86 e0       	ldi	r24, 0x06	; 6
 5d6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <motion_set>
}
 5da:	08 95       	ret

000005dc <back>:

void back (void) //both wheels backward
{
	motion_set(0x09);
 5dc:	89 e0       	ldi	r24, 0x09	; 9
 5de:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <motion_set>
}
 5e2:	08 95       	ret

000005e4 <left>:

void left (void) //Left wheel backward, Right wheel forward
{
	motion_set(0x05);
 5e4:	85 e0       	ldi	r24, 0x05	; 5
 5e6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <motion_set>
}
 5ea:	08 95       	ret

000005ec <right>:

void right (void) //Left wheel forward, Right wheel backward
{
	motion_set(0x0A);
 5ec:	8a e0       	ldi	r24, 0x0A	; 10
 5ee:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <motion_set>
}
 5f2:	08 95       	ret

000005f4 <stop>:

void stop (void) //hard stop
{
	motion_set(0x00);
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <motion_set>
}
 5fa:	08 95       	ret

000005fc <port_init>:
#include "motion.c"

//Function to Initialize PORTS
void port_init (void)
{
	motion_pin_config(); //robot motion pins config
 5fc:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <motion_pin_config>
	servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
 600:	0e 94 08 02 	call	0x410	; 0x410 <servo1_pin_config>
	buzzer_pin_config(); //configure PORTC 3 pin for buzzer
 604:	0e 94 fd 01 	call	0x3fa	; 0x3fa <buzzer_pin_config>
	lcd_port_config();	//all the LCD pins are configured
 608:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_port_config>
}
 60c:	08 95       	ret

0000060e <init_devices>:

void init_devices (void)
{
	cli(); //Clears the global interrupts
 60e:	f8 94       	cli
	port_init(); //Initializes all the ports
 610:	0e 94 fe 02 	call	0x5fc	; 0x5fc <port_init>
	timer1_init(); //Initialize ports of servo motor
 614:	0e 94 0b 02 	call	0x416	; 0x416 <timer1_init>
	uart0_init(); //Initialize UART1 for serial communication
 618:	0e 94 46 02 	call	0x48c	; 0x48c <uart0_init>
	sei();   //Enables the global interrupts
 61c:	78 94       	sei
}
 61e:	08 95       	ret

00000620 <main>:

//Main Function
int main(void)
{
	init_devices(); //Initializes all the devices attached to robot
 620:	0e 94 07 03 	call	0x60e	; 0x60e <init_devices>
	lcd_set_4bit();
 624:	0e 94 9c 00 	call	0x138	; 0x138 <lcd_set_4bit>
	lcd_init();
 628:	0e 94 03 01 	call	0x206	; 0x206 <lcd_init>
	
	lcd_cursor(1,2);
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	62 e0       	ldi	r22, 0x02	; 2
 630:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cursor>
	lcd_string("TurtleSim Robot"); //"TurtleSim Robot" flashes on the first row of LCD screen
 634:	81 e1       	ldi	r24, 0x11	; 17
 636:	92 e0       	ldi	r25, 0x02	; 2
 638:	0e 94 41 01 	call	0x282	; 0x282 <lcd_string>
	lcd_cursor(2,3);
 63c:	82 e0       	ldi	r24, 0x02	; 2
 63e:	63 e0       	ldi	r22, 0x03	; 3
 640:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_cursor>
	lcd_string("Team No.-394"); //"Team No.-394" flashes on the second row of LCD screen
 644:	81 e2       	ldi	r24, 0x21	; 33
 646:	92 e0       	ldi	r25, 0x02	; 2
 648:	0e 94 41 01 	call	0x282	; 0x282 <lcd_string>
 64c:	ff cf       	rjmp	.-2      	; 0x64c <main+0x2c>

0000064e <__subsf3>:
 64e:	50 58       	subi	r21, 0x80	; 128

00000650 <__addsf3>:
 650:	bb 27       	eor	r27, r27
 652:	aa 27       	eor	r26, r26
 654:	0e d0       	rcall	.+28     	; 0x672 <__addsf3x>
 656:	48 c1       	rjmp	.+656    	; 0x8e8 <__fp_round>
 658:	39 d1       	rcall	.+626    	; 0x8cc <__fp_pscA>
 65a:	30 f0       	brcs	.+12     	; 0x668 <__addsf3+0x18>
 65c:	3e d1       	rcall	.+636    	; 0x8da <__fp_pscB>
 65e:	20 f0       	brcs	.+8      	; 0x668 <__addsf3+0x18>
 660:	31 f4       	brne	.+12     	; 0x66e <__addsf3+0x1e>
 662:	9f 3f       	cpi	r25, 0xFF	; 255
 664:	11 f4       	brne	.+4      	; 0x66a <__addsf3+0x1a>
 666:	1e f4       	brtc	.+6      	; 0x66e <__addsf3+0x1e>
 668:	2e c1       	rjmp	.+604    	; 0x8c6 <__fp_nan>
 66a:	0e f4       	brtc	.+2      	; 0x66e <__addsf3+0x1e>
 66c:	e0 95       	com	r30
 66e:	e7 fb       	bst	r30, 7
 670:	24 c1       	rjmp	.+584    	; 0x8ba <__fp_inf>

00000672 <__addsf3x>:
 672:	e9 2f       	mov	r30, r25
 674:	4a d1       	rcall	.+660    	; 0x90a <__fp_split3>
 676:	80 f3       	brcs	.-32     	; 0x658 <__addsf3+0x8>
 678:	ba 17       	cp	r27, r26
 67a:	62 07       	cpc	r22, r18
 67c:	73 07       	cpc	r23, r19
 67e:	84 07       	cpc	r24, r20
 680:	95 07       	cpc	r25, r21
 682:	18 f0       	brcs	.+6      	; 0x68a <__addsf3x+0x18>
 684:	71 f4       	brne	.+28     	; 0x6a2 <__addsf3x+0x30>
 686:	9e f5       	brtc	.+102    	; 0x6ee <__addsf3x+0x7c>
 688:	62 c1       	rjmp	.+708    	; 0x94e <__fp_zero>
 68a:	0e f4       	brtc	.+2      	; 0x68e <__addsf3x+0x1c>
 68c:	e0 95       	com	r30
 68e:	0b 2e       	mov	r0, r27
 690:	ba 2f       	mov	r27, r26
 692:	a0 2d       	mov	r26, r0
 694:	0b 01       	movw	r0, r22
 696:	b9 01       	movw	r22, r18
 698:	90 01       	movw	r18, r0
 69a:	0c 01       	movw	r0, r24
 69c:	ca 01       	movw	r24, r20
 69e:	a0 01       	movw	r20, r0
 6a0:	11 24       	eor	r1, r1
 6a2:	ff 27       	eor	r31, r31
 6a4:	59 1b       	sub	r21, r25
 6a6:	99 f0       	breq	.+38     	; 0x6ce <__addsf3x+0x5c>
 6a8:	59 3f       	cpi	r21, 0xF9	; 249
 6aa:	50 f4       	brcc	.+20     	; 0x6c0 <__addsf3x+0x4e>
 6ac:	50 3e       	cpi	r21, 0xE0	; 224
 6ae:	68 f1       	brcs	.+90     	; 0x70a <__addsf3x+0x98>
 6b0:	1a 16       	cp	r1, r26
 6b2:	f0 40       	sbci	r31, 0x00	; 0
 6b4:	a2 2f       	mov	r26, r18
 6b6:	23 2f       	mov	r18, r19
 6b8:	34 2f       	mov	r19, r20
 6ba:	44 27       	eor	r20, r20
 6bc:	58 5f       	subi	r21, 0xF8	; 248
 6be:	f3 cf       	rjmp	.-26     	; 0x6a6 <__addsf3x+0x34>
 6c0:	46 95       	lsr	r20
 6c2:	37 95       	ror	r19
 6c4:	27 95       	ror	r18
 6c6:	a7 95       	ror	r26
 6c8:	f0 40       	sbci	r31, 0x00	; 0
 6ca:	53 95       	inc	r21
 6cc:	c9 f7       	brne	.-14     	; 0x6c0 <__addsf3x+0x4e>
 6ce:	7e f4       	brtc	.+30     	; 0x6ee <__addsf3x+0x7c>
 6d0:	1f 16       	cp	r1, r31
 6d2:	ba 0b       	sbc	r27, r26
 6d4:	62 0b       	sbc	r22, r18
 6d6:	73 0b       	sbc	r23, r19
 6d8:	84 0b       	sbc	r24, r20
 6da:	ba f0       	brmi	.+46     	; 0x70a <__addsf3x+0x98>
 6dc:	91 50       	subi	r25, 0x01	; 1
 6de:	a1 f0       	breq	.+40     	; 0x708 <__addsf3x+0x96>
 6e0:	ff 0f       	add	r31, r31
 6e2:	bb 1f       	adc	r27, r27
 6e4:	66 1f       	adc	r22, r22
 6e6:	77 1f       	adc	r23, r23
 6e8:	88 1f       	adc	r24, r24
 6ea:	c2 f7       	brpl	.-16     	; 0x6dc <__addsf3x+0x6a>
 6ec:	0e c0       	rjmp	.+28     	; 0x70a <__addsf3x+0x98>
 6ee:	ba 0f       	add	r27, r26
 6f0:	62 1f       	adc	r22, r18
 6f2:	73 1f       	adc	r23, r19
 6f4:	84 1f       	adc	r24, r20
 6f6:	48 f4       	brcc	.+18     	; 0x70a <__addsf3x+0x98>
 6f8:	87 95       	ror	r24
 6fa:	77 95       	ror	r23
 6fc:	67 95       	ror	r22
 6fe:	b7 95       	ror	r27
 700:	f7 95       	ror	r31
 702:	9e 3f       	cpi	r25, 0xFE	; 254
 704:	08 f0       	brcs	.+2      	; 0x708 <__addsf3x+0x96>
 706:	b3 cf       	rjmp	.-154    	; 0x66e <__addsf3+0x1e>
 708:	93 95       	inc	r25
 70a:	88 0f       	add	r24, r24
 70c:	08 f0       	brcs	.+2      	; 0x710 <__addsf3x+0x9e>
 70e:	99 27       	eor	r25, r25
 710:	ee 0f       	add	r30, r30
 712:	97 95       	ror	r25
 714:	87 95       	ror	r24
 716:	08 95       	ret

00000718 <__divsf3>:
 718:	0c d0       	rcall	.+24     	; 0x732 <__divsf3x>
 71a:	e6 c0       	rjmp	.+460    	; 0x8e8 <__fp_round>
 71c:	de d0       	rcall	.+444    	; 0x8da <__fp_pscB>
 71e:	40 f0       	brcs	.+16     	; 0x730 <__divsf3+0x18>
 720:	d5 d0       	rcall	.+426    	; 0x8cc <__fp_pscA>
 722:	30 f0       	brcs	.+12     	; 0x730 <__divsf3+0x18>
 724:	21 f4       	brne	.+8      	; 0x72e <__divsf3+0x16>
 726:	5f 3f       	cpi	r21, 0xFF	; 255
 728:	19 f0       	breq	.+6      	; 0x730 <__divsf3+0x18>
 72a:	c7 c0       	rjmp	.+398    	; 0x8ba <__fp_inf>
 72c:	51 11       	cpse	r21, r1
 72e:	10 c1       	rjmp	.+544    	; 0x950 <__fp_szero>
 730:	ca c0       	rjmp	.+404    	; 0x8c6 <__fp_nan>

00000732 <__divsf3x>:
 732:	eb d0       	rcall	.+470    	; 0x90a <__fp_split3>
 734:	98 f3       	brcs	.-26     	; 0x71c <__divsf3+0x4>

00000736 <__divsf3_pse>:
 736:	99 23       	and	r25, r25
 738:	c9 f3       	breq	.-14     	; 0x72c <__divsf3+0x14>
 73a:	55 23       	and	r21, r21
 73c:	b1 f3       	breq	.-20     	; 0x72a <__divsf3+0x12>
 73e:	95 1b       	sub	r25, r21
 740:	55 0b       	sbc	r21, r21
 742:	bb 27       	eor	r27, r27
 744:	aa 27       	eor	r26, r26
 746:	62 17       	cp	r22, r18
 748:	73 07       	cpc	r23, r19
 74a:	84 07       	cpc	r24, r20
 74c:	38 f0       	brcs	.+14     	; 0x75c <__divsf3_pse+0x26>
 74e:	9f 5f       	subi	r25, 0xFF	; 255
 750:	5f 4f       	sbci	r21, 0xFF	; 255
 752:	22 0f       	add	r18, r18
 754:	33 1f       	adc	r19, r19
 756:	44 1f       	adc	r20, r20
 758:	aa 1f       	adc	r26, r26
 75a:	a9 f3       	breq	.-22     	; 0x746 <__divsf3_pse+0x10>
 75c:	33 d0       	rcall	.+102    	; 0x7c4 <__divsf3_pse+0x8e>
 75e:	0e 2e       	mov	r0, r30
 760:	3a f0       	brmi	.+14     	; 0x770 <__divsf3_pse+0x3a>
 762:	e0 e8       	ldi	r30, 0x80	; 128
 764:	30 d0       	rcall	.+96     	; 0x7c6 <__divsf3_pse+0x90>
 766:	91 50       	subi	r25, 0x01	; 1
 768:	50 40       	sbci	r21, 0x00	; 0
 76a:	e6 95       	lsr	r30
 76c:	00 1c       	adc	r0, r0
 76e:	ca f7       	brpl	.-14     	; 0x762 <__divsf3_pse+0x2c>
 770:	29 d0       	rcall	.+82     	; 0x7c4 <__divsf3_pse+0x8e>
 772:	fe 2f       	mov	r31, r30
 774:	27 d0       	rcall	.+78     	; 0x7c4 <__divsf3_pse+0x8e>
 776:	66 0f       	add	r22, r22
 778:	77 1f       	adc	r23, r23
 77a:	88 1f       	adc	r24, r24
 77c:	bb 1f       	adc	r27, r27
 77e:	26 17       	cp	r18, r22
 780:	37 07       	cpc	r19, r23
 782:	48 07       	cpc	r20, r24
 784:	ab 07       	cpc	r26, r27
 786:	b0 e8       	ldi	r27, 0x80	; 128
 788:	09 f0       	breq	.+2      	; 0x78c <__divsf3_pse+0x56>
 78a:	bb 0b       	sbc	r27, r27
 78c:	80 2d       	mov	r24, r0
 78e:	bf 01       	movw	r22, r30
 790:	ff 27       	eor	r31, r31
 792:	93 58       	subi	r25, 0x83	; 131
 794:	5f 4f       	sbci	r21, 0xFF	; 255
 796:	2a f0       	brmi	.+10     	; 0x7a2 <__divsf3_pse+0x6c>
 798:	9e 3f       	cpi	r25, 0xFE	; 254
 79a:	51 05       	cpc	r21, r1
 79c:	68 f0       	brcs	.+26     	; 0x7b8 <__divsf3_pse+0x82>
 79e:	8d c0       	rjmp	.+282    	; 0x8ba <__fp_inf>
 7a0:	d7 c0       	rjmp	.+430    	; 0x950 <__fp_szero>
 7a2:	5f 3f       	cpi	r21, 0xFF	; 255
 7a4:	ec f3       	brlt	.-6      	; 0x7a0 <__divsf3_pse+0x6a>
 7a6:	98 3e       	cpi	r25, 0xE8	; 232
 7a8:	dc f3       	brlt	.-10     	; 0x7a0 <__divsf3_pse+0x6a>
 7aa:	86 95       	lsr	r24
 7ac:	77 95       	ror	r23
 7ae:	67 95       	ror	r22
 7b0:	b7 95       	ror	r27
 7b2:	f7 95       	ror	r31
 7b4:	9f 5f       	subi	r25, 0xFF	; 255
 7b6:	c9 f7       	brne	.-14     	; 0x7aa <__divsf3_pse+0x74>
 7b8:	88 0f       	add	r24, r24
 7ba:	91 1d       	adc	r25, r1
 7bc:	96 95       	lsr	r25
 7be:	87 95       	ror	r24
 7c0:	97 f9       	bld	r25, 7
 7c2:	08 95       	ret
 7c4:	e1 e0       	ldi	r30, 0x01	; 1
 7c6:	66 0f       	add	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	bb 1f       	adc	r27, r27
 7ce:	62 17       	cp	r22, r18
 7d0:	73 07       	cpc	r23, r19
 7d2:	84 07       	cpc	r24, r20
 7d4:	ba 07       	cpc	r27, r26
 7d6:	20 f0       	brcs	.+8      	; 0x7e0 <__divsf3_pse+0xaa>
 7d8:	62 1b       	sub	r22, r18
 7da:	73 0b       	sbc	r23, r19
 7dc:	84 0b       	sbc	r24, r20
 7de:	ba 0b       	sbc	r27, r26
 7e0:	ee 1f       	adc	r30, r30
 7e2:	88 f7       	brcc	.-30     	; 0x7c6 <__divsf3_pse+0x90>
 7e4:	e0 95       	com	r30
 7e6:	08 95       	ret

000007e8 <__fixunssfsi>:
 7e8:	98 d0       	rcall	.+304    	; 0x91a <__fp_splitA>
 7ea:	88 f0       	brcs	.+34     	; 0x80e <__fixunssfsi+0x26>
 7ec:	9f 57       	subi	r25, 0x7F	; 127
 7ee:	90 f0       	brcs	.+36     	; 0x814 <__fixunssfsi+0x2c>
 7f0:	b9 2f       	mov	r27, r25
 7f2:	99 27       	eor	r25, r25
 7f4:	b7 51       	subi	r27, 0x17	; 23
 7f6:	a0 f0       	brcs	.+40     	; 0x820 <__fixunssfsi+0x38>
 7f8:	d1 f0       	breq	.+52     	; 0x82e <__fixunssfsi+0x46>
 7fa:	66 0f       	add	r22, r22
 7fc:	77 1f       	adc	r23, r23
 7fe:	88 1f       	adc	r24, r24
 800:	99 1f       	adc	r25, r25
 802:	1a f0       	brmi	.+6      	; 0x80a <__fixunssfsi+0x22>
 804:	ba 95       	dec	r27
 806:	c9 f7       	brne	.-14     	; 0x7fa <__fixunssfsi+0x12>
 808:	12 c0       	rjmp	.+36     	; 0x82e <__fixunssfsi+0x46>
 80a:	b1 30       	cpi	r27, 0x01	; 1
 80c:	81 f0       	breq	.+32     	; 0x82e <__fixunssfsi+0x46>
 80e:	9f d0       	rcall	.+318    	; 0x94e <__fp_zero>
 810:	b1 e0       	ldi	r27, 0x01	; 1
 812:	08 95       	ret
 814:	9c c0       	rjmp	.+312    	; 0x94e <__fp_zero>
 816:	67 2f       	mov	r22, r23
 818:	78 2f       	mov	r23, r24
 81a:	88 27       	eor	r24, r24
 81c:	b8 5f       	subi	r27, 0xF8	; 248
 81e:	39 f0       	breq	.+14     	; 0x82e <__fixunssfsi+0x46>
 820:	b9 3f       	cpi	r27, 0xF9	; 249
 822:	cc f3       	brlt	.-14     	; 0x816 <__fixunssfsi+0x2e>
 824:	86 95       	lsr	r24
 826:	77 95       	ror	r23
 828:	67 95       	ror	r22
 82a:	b3 95       	inc	r27
 82c:	d9 f7       	brne	.-10     	; 0x824 <__fixunssfsi+0x3c>
 82e:	3e f4       	brtc	.+14     	; 0x83e <__fixunssfsi+0x56>
 830:	90 95       	com	r25
 832:	80 95       	com	r24
 834:	70 95       	com	r23
 836:	61 95       	neg	r22
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	8f 4f       	sbci	r24, 0xFF	; 255
 83c:	9f 4f       	sbci	r25, 0xFF	; 255
 83e:	08 95       	ret

00000840 <__floatunsisf>:
 840:	e8 94       	clt
 842:	09 c0       	rjmp	.+18     	; 0x856 <__floatsisf+0x12>

00000844 <__floatsisf>:
 844:	97 fb       	bst	r25, 7
 846:	3e f4       	brtc	.+14     	; 0x856 <__floatsisf+0x12>
 848:	90 95       	com	r25
 84a:	80 95       	com	r24
 84c:	70 95       	com	r23
 84e:	61 95       	neg	r22
 850:	7f 4f       	sbci	r23, 0xFF	; 255
 852:	8f 4f       	sbci	r24, 0xFF	; 255
 854:	9f 4f       	sbci	r25, 0xFF	; 255
 856:	99 23       	and	r25, r25
 858:	a9 f0       	breq	.+42     	; 0x884 <__floatsisf+0x40>
 85a:	f9 2f       	mov	r31, r25
 85c:	96 e9       	ldi	r25, 0x96	; 150
 85e:	bb 27       	eor	r27, r27
 860:	93 95       	inc	r25
 862:	f6 95       	lsr	r31
 864:	87 95       	ror	r24
 866:	77 95       	ror	r23
 868:	67 95       	ror	r22
 86a:	b7 95       	ror	r27
 86c:	f1 11       	cpse	r31, r1
 86e:	f8 cf       	rjmp	.-16     	; 0x860 <__floatsisf+0x1c>
 870:	fa f4       	brpl	.+62     	; 0x8b0 <__floatsisf+0x6c>
 872:	bb 0f       	add	r27, r27
 874:	11 f4       	brne	.+4      	; 0x87a <__floatsisf+0x36>
 876:	60 ff       	sbrs	r22, 0
 878:	1b c0       	rjmp	.+54     	; 0x8b0 <__floatsisf+0x6c>
 87a:	6f 5f       	subi	r22, 0xFF	; 255
 87c:	7f 4f       	sbci	r23, 0xFF	; 255
 87e:	8f 4f       	sbci	r24, 0xFF	; 255
 880:	9f 4f       	sbci	r25, 0xFF	; 255
 882:	16 c0       	rjmp	.+44     	; 0x8b0 <__floatsisf+0x6c>
 884:	88 23       	and	r24, r24
 886:	11 f0       	breq	.+4      	; 0x88c <__floatsisf+0x48>
 888:	96 e9       	ldi	r25, 0x96	; 150
 88a:	11 c0       	rjmp	.+34     	; 0x8ae <__floatsisf+0x6a>
 88c:	77 23       	and	r23, r23
 88e:	21 f0       	breq	.+8      	; 0x898 <__floatsisf+0x54>
 890:	9e e8       	ldi	r25, 0x8E	; 142
 892:	87 2f       	mov	r24, r23
 894:	76 2f       	mov	r23, r22
 896:	05 c0       	rjmp	.+10     	; 0x8a2 <__floatsisf+0x5e>
 898:	66 23       	and	r22, r22
 89a:	71 f0       	breq	.+28     	; 0x8b8 <__floatsisf+0x74>
 89c:	96 e8       	ldi	r25, 0x86	; 134
 89e:	86 2f       	mov	r24, r22
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	60 e0       	ldi	r22, 0x00	; 0
 8a4:	2a f0       	brmi	.+10     	; 0x8b0 <__floatsisf+0x6c>
 8a6:	9a 95       	dec	r25
 8a8:	66 0f       	add	r22, r22
 8aa:	77 1f       	adc	r23, r23
 8ac:	88 1f       	adc	r24, r24
 8ae:	da f7       	brpl	.-10     	; 0x8a6 <__floatsisf+0x62>
 8b0:	88 0f       	add	r24, r24
 8b2:	96 95       	lsr	r25
 8b4:	87 95       	ror	r24
 8b6:	97 f9       	bld	r25, 7
 8b8:	08 95       	ret

000008ba <__fp_inf>:
 8ba:	97 f9       	bld	r25, 7
 8bc:	9f 67       	ori	r25, 0x7F	; 127
 8be:	80 e8       	ldi	r24, 0x80	; 128
 8c0:	70 e0       	ldi	r23, 0x00	; 0
 8c2:	60 e0       	ldi	r22, 0x00	; 0
 8c4:	08 95       	ret

000008c6 <__fp_nan>:
 8c6:	9f ef       	ldi	r25, 0xFF	; 255
 8c8:	80 ec       	ldi	r24, 0xC0	; 192
 8ca:	08 95       	ret

000008cc <__fp_pscA>:
 8cc:	00 24       	eor	r0, r0
 8ce:	0a 94       	dec	r0
 8d0:	16 16       	cp	r1, r22
 8d2:	17 06       	cpc	r1, r23
 8d4:	18 06       	cpc	r1, r24
 8d6:	09 06       	cpc	r0, r25
 8d8:	08 95       	ret

000008da <__fp_pscB>:
 8da:	00 24       	eor	r0, r0
 8dc:	0a 94       	dec	r0
 8de:	12 16       	cp	r1, r18
 8e0:	13 06       	cpc	r1, r19
 8e2:	14 06       	cpc	r1, r20
 8e4:	05 06       	cpc	r0, r21
 8e6:	08 95       	ret

000008e8 <__fp_round>:
 8e8:	09 2e       	mov	r0, r25
 8ea:	03 94       	inc	r0
 8ec:	00 0c       	add	r0, r0
 8ee:	11 f4       	brne	.+4      	; 0x8f4 <__fp_round+0xc>
 8f0:	88 23       	and	r24, r24
 8f2:	52 f0       	brmi	.+20     	; 0x908 <__fp_round+0x20>
 8f4:	bb 0f       	add	r27, r27
 8f6:	40 f4       	brcc	.+16     	; 0x908 <__fp_round+0x20>
 8f8:	bf 2b       	or	r27, r31
 8fa:	11 f4       	brne	.+4      	; 0x900 <__fp_round+0x18>
 8fc:	60 ff       	sbrs	r22, 0
 8fe:	04 c0       	rjmp	.+8      	; 0x908 <__fp_round+0x20>
 900:	6f 5f       	subi	r22, 0xFF	; 255
 902:	7f 4f       	sbci	r23, 0xFF	; 255
 904:	8f 4f       	sbci	r24, 0xFF	; 255
 906:	9f 4f       	sbci	r25, 0xFF	; 255
 908:	08 95       	ret

0000090a <__fp_split3>:
 90a:	57 fd       	sbrc	r21, 7
 90c:	90 58       	subi	r25, 0x80	; 128
 90e:	44 0f       	add	r20, r20
 910:	55 1f       	adc	r21, r21
 912:	59 f0       	breq	.+22     	; 0x92a <__fp_splitA+0x10>
 914:	5f 3f       	cpi	r21, 0xFF	; 255
 916:	71 f0       	breq	.+28     	; 0x934 <__fp_splitA+0x1a>
 918:	47 95       	ror	r20

0000091a <__fp_splitA>:
 91a:	88 0f       	add	r24, r24
 91c:	97 fb       	bst	r25, 7
 91e:	99 1f       	adc	r25, r25
 920:	61 f0       	breq	.+24     	; 0x93a <__fp_splitA+0x20>
 922:	9f 3f       	cpi	r25, 0xFF	; 255
 924:	79 f0       	breq	.+30     	; 0x944 <__fp_splitA+0x2a>
 926:	87 95       	ror	r24
 928:	08 95       	ret
 92a:	12 16       	cp	r1, r18
 92c:	13 06       	cpc	r1, r19
 92e:	14 06       	cpc	r1, r20
 930:	55 1f       	adc	r21, r21
 932:	f2 cf       	rjmp	.-28     	; 0x918 <__fp_split3+0xe>
 934:	46 95       	lsr	r20
 936:	f1 df       	rcall	.-30     	; 0x91a <__fp_splitA>
 938:	08 c0       	rjmp	.+16     	; 0x94a <__fp_splitA+0x30>
 93a:	16 16       	cp	r1, r22
 93c:	17 06       	cpc	r1, r23
 93e:	18 06       	cpc	r1, r24
 940:	99 1f       	adc	r25, r25
 942:	f1 cf       	rjmp	.-30     	; 0x926 <__fp_splitA+0xc>
 944:	86 95       	lsr	r24
 946:	71 05       	cpc	r23, r1
 948:	61 05       	cpc	r22, r1
 94a:	08 94       	sec
 94c:	08 95       	ret

0000094e <__fp_zero>:
 94e:	e8 94       	clt

00000950 <__fp_szero>:
 950:	bb 27       	eor	r27, r27
 952:	66 27       	eor	r22, r22
 954:	77 27       	eor	r23, r23
 956:	cb 01       	movw	r24, r22
 958:	97 f9       	bld	r25, 7
 95a:	08 95       	ret

0000095c <__udivmodhi4>:
 95c:	aa 1b       	sub	r26, r26
 95e:	bb 1b       	sub	r27, r27
 960:	51 e1       	ldi	r21, 0x11	; 17
 962:	07 c0       	rjmp	.+14     	; 0x972 <__udivmodhi4_ep>

00000964 <__udivmodhi4_loop>:
 964:	aa 1f       	adc	r26, r26
 966:	bb 1f       	adc	r27, r27
 968:	a6 17       	cp	r26, r22
 96a:	b7 07       	cpc	r27, r23
 96c:	10 f0       	brcs	.+4      	; 0x972 <__udivmodhi4_ep>
 96e:	a6 1b       	sub	r26, r22
 970:	b7 0b       	sbc	r27, r23

00000972 <__udivmodhi4_ep>:
 972:	88 1f       	adc	r24, r24
 974:	99 1f       	adc	r25, r25
 976:	5a 95       	dec	r21
 978:	a9 f7       	brne	.-22     	; 0x964 <__udivmodhi4_loop>
 97a:	80 95       	com	r24
 97c:	90 95       	com	r25
 97e:	bc 01       	movw	r22, r24
 980:	cd 01       	movw	r24, r26
 982:	08 95       	ret

00000984 <_exit>:
 984:	f8 94       	cli

00000986 <__stop_program>:
 986:	ff cf       	rjmp	.-2      	; 0x986 <__stop_program>
